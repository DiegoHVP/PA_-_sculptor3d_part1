<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sculptor_8cpp_source" xml:lang="en-US">
<title>sculptor.cpp</title>
<programlisting linenumbering="unnumbered"><anchor xml:id="_sculptor_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;voxel.h&quot;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;sculptor.h&quot;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00006"/>00006 
<anchor xml:id="_sculptor_8cpp_source_1l00018"/><link linkend="_class_sculptor_1a014e3ef5517bf0e9d9e14486b6ac6433">00018</link> <link linkend="_class_sculptor_1a014e3ef5517bf0e9d9e14486b6ac6433">Sculptor::Sculptor</link>(<emphasis role="keywordtype">int</emphasis>&#32;_nx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_ny,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nz){
<anchor xml:id="_sculptor_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;nx&#32;=&#32;_nx;
<anchor xml:id="_sculptor_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;ny&#32;=&#32;_ny;
<anchor xml:id="_sculptor_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;nz&#32;=&#32;_nz;
<anchor xml:id="_sculptor_8cpp_source_1l00022"/>00022 
<anchor xml:id="_sculptor_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;v&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_voxel">Voxel</link>**[nx];
<anchor xml:id="_sculptor_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nx;&#32;i++)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v[i]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_voxel">Voxel</link>*[ny];
<anchor xml:id="_sculptor_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;ny;&#32;j++)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v[i][j]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_voxel">Voxel</link>[nz];
<anchor xml:id="_sculptor_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;nx;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;j&lt;ny;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&lt;nz;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v[i][j][k].show&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sculptor_8cpp_source_1l00032"/>00032 
<anchor xml:id="_sculptor_8cpp_source_1l00033"/>00033 };
<anchor xml:id="_sculptor_8cpp_source_1l00034"/>00034 
<anchor xml:id="_sculptor_8cpp_source_1l00039"/><link linkend="_class_sculptor_1a8f159bf97458326f16d2e238e11be7ff">00039</link> <link linkend="_class_sculptor_1a8f159bf97458326f16d2e238e11be7ff">Sculptor::~Sculptor</link>(){
<anchor xml:id="_sculptor_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nx;&#32;i++)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;ny;&#32;j++)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;v[i][j];
<anchor xml:id="_sculptor_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;v[i];
<anchor xml:id="_sculptor_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;v;
<anchor xml:id="_sculptor_8cpp_source_1l00047"/>00047 };
<anchor xml:id="_sculptor_8cpp_source_1l00048"/>00048 
<anchor xml:id="_sculptor_8cpp_source_1l00049"/>00049 
<anchor xml:id="_sculptor_8cpp_source_1l00050"/>00050 
<anchor xml:id="_sculptor_8cpp_source_1l00065"/><link linkend="_class_sculptor_1a5723e671e073ac310b6f385a7fdc9f9f">00065</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a5723e671e073ac310b6f385a7fdc9f9f">Sculptor::setColor</link>(<emphasis role="keywordtype">float</emphasis>&#32;_r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;_g,&#32;<emphasis role="keywordtype">float</emphasis>&#32;_b,&#32;<emphasis role="keywordtype">float</emphasis>&#32;_a){
<anchor xml:id="_sculptor_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;r&#32;=&#32;_r/255.0;
<anchor xml:id="_sculptor_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;g&#32;=&#32;_g/255.0;
<anchor xml:id="_sculptor_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;b&#32;=&#32;_b/255.0;
<anchor xml:id="_sculptor_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;a&#32;=&#32;_a/255.0;
<anchor xml:id="_sculptor_8cpp_source_1l00070"/>00070 
<anchor xml:id="_sculptor_8cpp_source_1l00071"/>00071 };
<anchor xml:id="_sculptor_8cpp_source_1l00072"/>00072 
<anchor xml:id="_sculptor_8cpp_source_1l00073"/>00073 
<anchor xml:id="_sculptor_8cpp_source_1l00074"/>00074 
<anchor xml:id="_sculptor_8cpp_source_1l00090"/><link linkend="_class_sculptor_1a4bdea3048b419d58e93074060eaa7b52">00090</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a4bdea3048b419d58e93074060eaa7b52">Sculptor::putVoxel</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z){
<anchor xml:id="_sculptor_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a7daa6a3073416618d1365e0fc38f152f">show</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sculptor_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;=&#32;r;
<anchor xml:id="_sculptor_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;=&#32;g;
<anchor xml:id="_sculptor_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;=&#32;b;
<anchor xml:id="_sculptor_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;=&#32;a;
<anchor xml:id="_sculptor_8cpp_source_1l00096"/>00096 }
<anchor xml:id="_sculptor_8cpp_source_1l00097"/>00097 
<anchor xml:id="_sculptor_8cpp_source_1l00098"/>00098 
<anchor xml:id="_sculptor_8cpp_source_1l00114"/><link linkend="_class_sculptor_1ad9d714a35fc8ae16d06eb5df37c3493c">00114</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1ad9d714a35fc8ae16d06eb5df37c3493c">Sculptor::cutVoxel</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z){
<anchor xml:id="_sculptor_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;v[x][y][z].<link linkend="_struct_voxel_1a7daa6a3073416618d1365e0fc38f152f">show</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sculptor_8cpp_source_1l00116"/>00116 }
<anchor xml:id="_sculptor_8cpp_source_1l00117"/>00117 
<anchor xml:id="_sculptor_8cpp_source_1l00118"/>00118 
<anchor xml:id="_sculptor_8cpp_source_1l00119"/>00119 
<anchor xml:id="_sculptor_8cpp_source_1l00138"/><link linkend="_class_sculptor_1a311ad7a0fb83fc67ac1f378be8e99fe1">00138</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a311ad7a0fb83fc67ac1f378be8e99fe1">Sculptor::putBox</link>(<emphasis role="keywordtype">int</emphasis>&#32;x0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z1){
<anchor xml:id="_sculptor_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;x0;&#32;i&lt;x1;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;y0;j&lt;y1;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;z0;&#32;k&lt;z1;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_sculptor_1a4bdea3048b419d58e93074060eaa7b52">putVoxel</link>(i,j,k);
<anchor xml:id="_sculptor_8cpp_source_1l00141"/>00141 }
<anchor xml:id="_sculptor_8cpp_source_1l00142"/>00142 
<anchor xml:id="_sculptor_8cpp_source_1l00161"/><link linkend="_class_sculptor_1aa84a1b12b09e9e103fc8d78f8d1bc00f">00161</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1aa84a1b12b09e9e103fc8d78f8d1bc00f">Sculptor::cutBox</link>(<emphasis role="keywordtype">int</emphasis>&#32;x0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;z1){
<anchor xml:id="_sculptor_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;x0;&#32;i&lt;x1;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;y0;j&lt;y1;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;z0;&#32;k&lt;z1;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v[i][j][k].show&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sculptor_8cpp_source_1l00164"/>00164 }
<anchor xml:id="_sculptor_8cpp_source_1l00165"/>00165 
<anchor xml:id="_sculptor_8cpp_source_1l00182"/><link linkend="_class_sculptor_1a794a2b6ee8fc8098fd6150cb46101fc6">00182</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a794a2b6ee8fc8098fd6150cb46101fc6">Sculptor::putSphere</link>(<emphasis role="keywordtype">int</emphasis>&#32;xcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ycenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;zcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;radius){
<anchor xml:id="_sculptor_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;-radius;&#32;i&lt;radius;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;-radius;j&lt;radius;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;-radius;&#32;k&lt;radius;k++){
<anchor xml:id="_sculptor_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(i*i&#32;+&#32;j*j&#32;+k*k)&#32;&lt;=&#32;(radius*radius)&#32;)
<anchor xml:id="_sculptor_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_sculptor_1a4bdea3048b419d58e93074060eaa7b52">putVoxel</link>(&#32;xcenter&#32;+&#32;i,&#32;ycenter&#32;+&#32;j&#32;,&#32;zcenter&#32;+&#32;k);
<anchor xml:id="_sculptor_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00187"/>00187 }
<anchor xml:id="_sculptor_8cpp_source_1l00188"/>00188 
<anchor xml:id="_sculptor_8cpp_source_1l00205"/><link linkend="_class_sculptor_1a67ab8c0ba5116adb8af1d01ad373ac15">00205</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a67ab8c0ba5116adb8af1d01ad373ac15">Sculptor::cutSphere</link>(<emphasis role="keywordtype">int</emphasis>&#32;xcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ycenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;zcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;radius){
<anchor xml:id="_sculptor_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;-radius;&#32;i&lt;radius;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;-radius;j&lt;radius;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;-radius;&#32;k&lt;radius;k++){
<anchor xml:id="_sculptor_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;(i*i&#32;+&#32;j*j&#32;+k*k)&#32;&lt;=&#32;(radius*radius)&#32;)
<anchor xml:id="_sculptor_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_sculptor_1ad9d714a35fc8ae16d06eb5df37c3493c">cutVoxel</link>(&#32;xcenter&#32;+&#32;i,&#32;ycenter&#32;+&#32;j&#32;,&#32;zcenter&#32;+&#32;k);
<anchor xml:id="_sculptor_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00210"/>00210 }
<anchor xml:id="_sculptor_8cpp_source_1l00211"/>00211 
<anchor xml:id="_sculptor_8cpp_source_1l00212"/>00212 
<anchor xml:id="_sculptor_8cpp_source_1l00213"/>00213 
<anchor xml:id="_sculptor_8cpp_source_1l00232"/><link linkend="_class_sculptor_1a093615b0c2b9b3a17a56300b9b939f39">00232</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a093615b0c2b9b3a17a56300b9b939f39">Sculptor::putEllipsoid</link>(<emphasis role="keywordtype">int</emphasis>&#32;xcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ycenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;zcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;rx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;rz){
<anchor xml:id="_sculptor_8cpp_source_1l00233"/>00233 
<anchor xml:id="_sculptor_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;nx&#32;;&#32;i++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;ny;&#32;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;nz;&#32;k++)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;((i*i)/(<emphasis role="keywordtype">float</emphasis>)(rx*rx)&#32;+&#32;(j*j)/(<emphasis role="keywordtype">float</emphasis>)(ry*ry)&#32;+&#32;(k*k)/(<emphasis role="keywordtype">float</emphasis>)(rz*rz))&#32;&lt;=&#32;1&#32;)
<anchor xml:id="_sculptor_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_sculptor_1a4bdea3048b419d58e93074060eaa7b52">putVoxel</link>(xcenter&#32;+&#32;i,&#32;ycenter&#32;+&#32;j,&#32;zcenter&#32;+&#32;k);
<anchor xml:id="_sculptor_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00238"/>00238 }
<anchor xml:id="_sculptor_8cpp_source_1l00239"/>00239 
<anchor xml:id="_sculptor_8cpp_source_1l00240"/>00240 
<anchor xml:id="_sculptor_8cpp_source_1l00259"/><link linkend="_class_sculptor_1a18d2922c111c4c13653ee07d878151ad">00259</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a18d2922c111c4c13653ee07d878151ad">Sculptor::cutEllipsoid</link>(<emphasis role="keywordtype">int</emphasis>&#32;xcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ycenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;zcenter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;rx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ry,&#32;<emphasis role="keywordtype">int</emphasis>&#32;rz){
<anchor xml:id="_sculptor_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tx,ty,tz;
<anchor xml:id="_sculptor_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;-rx;&#32;i&lt;rx;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;-ry;j&lt;ry;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;-rz;&#32;k&lt;rz;k++){
<anchor xml:id="_sculptor_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tx&#32;=&#32;((i&#32;-&#32;xcenter)&#32;*&#32;(i&#32;-&#32;xcenter))&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(rx&#32;*&#32;rx);
<anchor xml:id="_sculptor_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ty&#32;=&#32;((j&#32;-&#32;ycenter)&#32;*&#32;(j&#32;-&#32;ycenter))&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(ry&#32;*&#32;ry);
<anchor xml:id="_sculptor_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tz&#32;=&#32;((k&#32;-&#32;zcenter)&#32;*&#32;(k&#32;-&#32;zcenter))&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(rz&#32;*&#32;rz);
<anchor xml:id="_sculptor_8cpp_source_1l00265"/>00265 
<anchor xml:id="_sculptor_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((tx&#32;+&#32;ty&#32;+&#32;tz)&#32;&lt;=&#32;1.0)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_sculptor_1ad9d714a35fc8ae16d06eb5df37c3493c">cutVoxel</link>(i,&#32;j,&#32;k);
<anchor xml:id="_sculptor_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00270"/>00270 }
<anchor xml:id="_sculptor_8cpp_source_1l00271"/>00271 
<anchor xml:id="_sculptor_8cpp_source_1l00272"/>00272 
<anchor xml:id="_sculptor_8cpp_source_1l00286"/><link linkend="_class_sculptor_1a58cb72d22001a5034f15383ca983830c">00286</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_sculptor_1a58cb72d22001a5034f15383ca983830c">Sculptor::writeOFF</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filename){
<anchor xml:id="_sculptor_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;std::ofstream&#32;file;
<anchor xml:id="_sculptor_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;file.open(filename);
<anchor xml:id="_sculptor_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!file.is_open()){
<anchor xml:id="_sculptor_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;ERRO&#32;AO&#32;CRIAR&#32;ARQUIVO&quot;</emphasis>&lt;&lt;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(1);
<anchor xml:id="_sculptor_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cont&#32;=&#32;0;
<anchor xml:id="_sculptor_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;nx;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;j&lt;ny;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&lt;nz;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(v[i][j][k].show)
<anchor xml:id="_sculptor_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont++;
<anchor xml:id="_sculptor_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;file&lt;&lt;<emphasis role="stringliteral">&quot;OFF\n&quot;</emphasis>&lt;&lt;cont*8&lt;&lt;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&lt;&lt;cont*6&lt;&lt;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&lt;&lt;0&lt;&lt;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;nx;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;j&lt;ny;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&lt;nz;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(v[i][j][k].show){
<anchor xml:id="_sculptor_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;-&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;-&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;-&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;-&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;+&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;+&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;-&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;+&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;i&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j&#32;+&#32;0.5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;k&#32;+&#32;0.5&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00309"/>00309 
<anchor xml:id="_sculptor_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertice&#32;=&#32;0;
<anchor xml:id="_sculptor_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;file&#32;&lt;&lt;&#32;std::fixed&lt;&lt;std::setprecision(2);&#32;<emphasis role="comment">//&#32;Fixa&#32;em&#32;decimal&#32;float&#32;&lt;iomanip&gt;</emphasis>
<anchor xml:id="_sculptor_8cpp_source_1l00312"/>00312 
<anchor xml:id="_sculptor_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nx;&#32;i++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;ny;&#32;j++)&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;nz;&#32;k++)
<anchor xml:id="_sculptor_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v[i][j][k].show)&#32;{
<anchor xml:id="_sculptor_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;6&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;7&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;7&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;7&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;6&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;6&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vertice&#32;+&#32;5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a06872ec79b836120b551a848968c0f1b">r</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a27c0da1ed2ff430401d23ff171612a73">g</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a5cd8432b1d7d0fd8b79e0fc7d10373a8">b</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;v[i][j][k].<link linkend="_struct_voxel_1a3ce2579eb0a9f09a07112ce7498a638e">a</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertice&#32;+=&#32;8;
<anchor xml:id="_sculptor_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sculptor_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;file.close();
<anchor xml:id="_sculptor_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;ARQUIVO&#32;SALVO&#32;COM&#32;SUCESSO&quot;</emphasis>&lt;&lt;std::endl;
<anchor xml:id="_sculptor_8cpp_source_1l00325"/>00325 
<anchor xml:id="_sculptor_8cpp_source_1l00326"/>00326 }
</programlisting></section>
